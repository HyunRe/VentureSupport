// Generated by view binder compiler. Do not edit!
package com.example.venturesupport.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.venturesupport.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ExpensechartItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView breakdownText;

  @NonNull
  public final TextView expenseText;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final TextView percentText;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final View underline;

  private ExpensechartItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView breakdownText, @NonNull TextView expenseText,
      @NonNull LinearLayout linearLayout, @NonNull TextView percentText,
      @NonNull ProgressBar progressBar, @NonNull View underline) {
    this.rootView = rootView;
    this.breakdownText = breakdownText;
    this.expenseText = expenseText;
    this.linearLayout = linearLayout;
    this.percentText = percentText;
    this.progressBar = progressBar;
    this.underline = underline;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ExpensechartItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ExpensechartItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.expensechart_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ExpensechartItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.breakdown_text;
      TextView breakdownText = ViewBindings.findChildViewById(rootView, id);
      if (breakdownText == null) {
        break missingId;
      }

      id = R.id.expense_text;
      TextView expenseText = ViewBindings.findChildViewById(rootView, id);
      if (expenseText == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.percent_text;
      TextView percentText = ViewBindings.findChildViewById(rootView, id);
      if (percentText == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.underline;
      View underline = ViewBindings.findChildViewById(rootView, id);
      if (underline == null) {
        break missingId;
      }

      return new ExpensechartItemBinding((ConstraintLayout) rootView, breakdownText, expenseText,
          linearLayout, percentText, progressBar, underline);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
